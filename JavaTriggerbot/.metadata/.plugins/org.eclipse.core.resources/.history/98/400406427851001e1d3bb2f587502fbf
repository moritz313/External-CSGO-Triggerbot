import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.geom.AffineTransform;
import java.awt.geom.PathIterator;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RoundRectangle2D;

import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

public class Menu extends JFrame {
    private JButton button1, button2;
    private JSlider slider1, slider2;

    public Menu() {
        setUndecorated(true);
        Shape roundedRectangleShape = new RoundRectangle2D.Double(0, 0, 400, 300, 30, 30);
        setBackgroundShape(roundedRectangleShape, Color.RED); // You can replace Color.RED with your desired color
        
        
        
        JPanel contentPanel = new JPanel();
        contentPanel.setLayout(new BorderLayout());
        contentPanel.setBackground(Color.decode("#171d2b"));

        button1 = new JButton("Button 1");
        button2 = new JButton("Button 2");

        slider1 = new JSlider(JSlider.HORIZONTAL, 0, 100, 50);
        slider2 = new JSlider(JSlider.HORIZONTAL, 0, 100, 50);

        slider1.setMajorTickSpacing(20);
        slider1.setMinorTickSpacing(5);
        slider1.setPaintTicks(true);
        slider1.setPaintLabels(true);

        slider2.setMajorTickSpacing(20);
        slider2.setMinorTickSpacing(5);
        slider2.setPaintTicks(true);
        slider2.setPaintLabels(true);

        JPanel buttonPanel = new JPanel();
        buttonPanel.add(button1);
        buttonPanel.add(button2);

        JPanel sliderPanel = new JPanel();
        sliderPanel.setLayout(new GridLayout(2, 1));
        sliderPanel.add(slider1);
        sliderPanel.add(slider2);

        contentPanel.add(buttonPanel, BorderLayout.NORTH);
        contentPanel.add(sliderPanel, BorderLayout.CENTER);

        add(contentPanel);
        setBackground(new Color(250, 0, 0, 240));
        button1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Handle button1 click event
            }
        });

        button2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Handle button2 click event
            }
        });

        slider1.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                int value = slider1.getValue();
                // Handle slider1 value change event
            }
        });

        slider2.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                int value = slider2.getValue();
                // Handle slider2 value change event
            }
        });
        
        setBackground(Color.decode("#171d2b"));
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(400, 300);
        setLocationRelativeTo(null);
    }
 // Custom method to set the background shape with a given color
    private void setBackgroundShape(Shape shape, Color color) {
        setShape(new CompoundShape(shape, color));
        repaint(); // Repaint the component to reflect the new shape
    }

    // Custom class to combine a shape and a color
    private static class CompoundShape implements Shape {
        private final Shape shape;
        private final Color color;

        public CompoundShape(Shape shape, Color color) {
            this.shape = shape;
            this.color = color;
        }

        @Override
        public boolean contains(double x, double y) {
            return shape.contains(x, y);
        }

        // Implement other methods of the Shape interface as needed

        public void paintShape(Graphics2D g2d) {
            g2d.setColor(color);
            g2d.fill(shape);
        }

		@Override
		public Rectangle getBounds() {
			// TODO Auto-generated method stub
			return null;
		}

		@Override
		public Rectangle2D getBounds2D() {
			// TODO Auto-generated method stub
			return null;
		}

		@Override
		public boolean contains(Point2D p) {
			// TODO Auto-generated method stub
			return false;
		}

		@Override
		public boolean intersects(double x, double y, double w, double h) {
			// TODO Auto-generated method stub
			return false;
		}

		@Override
		public boolean intersects(Rectangle2D r) {
			// TODO Auto-generated method stub
			return false;
		}

		@Override
		public boolean contains(double x, double y, double w, double h) {
			// TODO Auto-generated method stub
			return false;
		}

		@Override
		public boolean contains(Rectangle2D r) {
			// TODO Auto-generated method stub
			return false;
		}

		@Override
		public PathIterator getPathIterator(AffineTransform at) {
			// TODO Auto-generated method stub
			return null;
		}

		@Override
		public PathIterator getPathIterator(AffineTransform at, double flatness) {
			// TODO Auto-generated method stub
			return null;
		}
    }
    
    

  
}



